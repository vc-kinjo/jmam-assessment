services:
  # Django Backend
  backend:
    build:
      context: ./backend
      target: production
    container_name: gunchart_backend_prod
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_NAME=${DB_NAME:-gunchart_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 project.wsgi:application"

  # React Frontend (Nginx)
  web:
    build:
      context: ./frontend
      target: production
    container_name: gunchart_frontend_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - backend_static:/app/static:ro
      - backend_media:/app/media:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: gunchart_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-gunchart_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  backend_static:
  backend_media: